{"ast":null,"code":"var _jsxFileName = \"/home/manu/Documents/development/React/tictactoe/tictactoe/src/components/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Rows from './Rows'; // import Squares from './Squares';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n\n  const [board, setBoard] = useState(Array(9).fill(null)); //   const [winner, setWinner] = useState('');\n  //   const [solution, setSolution] = useState([]);\n\n  const [game, setGame] = useState(false);\n\n  const initialJSX = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tic-Tac-Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Rows, {\n        fillSquare: fillSquare,\n        board: board,\n        game: game\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  const [JSX, setJSX] = useState(initialJSX);\n  let round = 0;\n  let winner = '';\n  let solution = [];\n\n  function fillSquare(sqId) {\n    const player = round % 2 === 0 ? 'X' : 'O';\n    board[sqId] = player; // console.log(`Ronda: ${round}, jugador ${player}, ha colocado en ${sqId}`);\n\n    round++;\n    setBoard(board);\n    const solutions = [[0, 1, 2], [0, 4, 8], [0, 3, 6], [1, 4, 7], [3, 4, 5], [6, 7, 8], [2, 5, 8], [2, 4, 6]];\n\n    for (let i = 0; i < solutions.length; i++) {\n      const [a, b, c] = solutions[i];\n\n      if (board[a] && board[a] === board[b] && board[b] === board[c]) {\n        const Winner = board[a];\n        solution = solutions[i];\n        winner = Winner;\n        setGame(true);\n      }\n    }\n\n    if (!board.includes(null)) {\n      const newJSX = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tic-Tac-Toe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"endGame\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"It was a tie!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Rows, {\n          fillSquare: fillSquare,\n          board: board\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n\n      return setJSX(newJSX);\n    }\n  }\n\n  useEffect(() => {\n    console.log('hola soy el useEffect y estoy siendo ejecutado');\n    console.log(game);\n    console.log(solution);\n    console.log(winner);\n\n    const newJSX = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tic-Tac-Toe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"endGame\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Ha ganado \", winner]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rows, {\n        fillSquare: fillSquare,\n        board: board,\n        game: game,\n        winners: solution\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n\n    return setJSX(newJSX);\n  }, [game]); //   useEffect(() => {}, [winner]);\n\n  return JSX;\n}\n\n_s(Board, \"4QdZS0Fra0hJJkxa/kpHuJcH/mc=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/manu/Documents/development/React/tictactoe/tictactoe/src/components/Board.jsx"],"names":["React","useEffect","useState","Rows","Board","board","setBoard","Array","fill","game","setGame","initialJSX","fillSquare","JSX","setJSX","round","winner","solution","sqId","player","solutions","i","length","a","b","c","Winner","includes","newJSX","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Rows from './Rows';\n// import Squares from './Squares';\n\nexport default function Board() {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  //   const [winner, setWinner] = useState('');\n  //   const [solution, setSolution] = useState([]);\n  const [game, setGame] = useState(false);\n  const initialJSX = (\n    <>\n      <h1>Tic-Tac-Toe</h1>\n      <div className='board'>\n        <Rows fillSquare={fillSquare} board={board} game={game} />\n      </div>\n    </>\n  );\n  const [JSX, setJSX] = useState(initialJSX);\n\n  let round = 0;\n  let winner = '';\n  let solution = [];\n  function fillSquare(sqId) {\n    const player = round % 2 === 0 ? 'X' : 'O';\n    board[sqId] = player;\n    // console.log(`Ronda: ${round}, jugador ${player}, ha colocado en ${sqId}`);\n    round++;\n    setBoard(board);\n    const solutions = [\n      [0, 1, 2],\n      [0, 4, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [3, 4, 5],\n      [6, 7, 8],\n      [2, 5, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < solutions.length; i++) {\n      const [a, b, c] = solutions[i];\n      if (board[a] && board[a] === board[b] && board[b] === board[c]) {\n        const Winner = board[a];\n        solution = solutions[i];\n        winner = Winner;\n        setGame(true);\n      }\n    }\n    if (!board.includes(null)) {\n      const newJSX = (\n        <>\n          <h1>Tic-Tac-Toe</h1>\n          <div className='endGame'>\n            <h1>It was a tie!</h1>\n          </div>\n          <Rows fillSquare={fillSquare} board={board} />\n        </>\n      );\n      return setJSX(newJSX);\n    }\n  }\n\n  useEffect(() => {\n    console.log('hola soy el useEffect y estoy siendo ejecutado');\n    console.log(game);\n    console.log(solution);\n    console.log(winner);\n    const newJSX = (\n      <>\n        <h1>Tic-Tac-Toe</h1>\n        <div className='endGame'>\n          <h1>Ha ganado {winner}</h1>\n        </div>\n        <Rows\n          fillSquare={fillSquare}\n          board={board}\n          game={game}\n          winners={solution}\n        />\n      </>\n    );\n    return setJSX(newJSX);\n  }, [game]);\n\n  //   useEffect(() => {}, [winner]);\n  return JSX;\n}\n"]},"metadata":{},"sourceType":"module"}