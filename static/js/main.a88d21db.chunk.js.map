{"version":3,"sources":["components/Squares.jsx","components/Rows.jsx","components/Board.jsx","App.jsx","index.jsx"],"names":["Squares","sPos","fillSquare","board","active","game","useState","reLoad","setReload","handleMouseDown","e","target","style","backgroundColor","handleMouseUp","handleOnMouseOver","handleOnMouseOut","divs","handleClick","console","log","pointerEvents","attributes","value","finished","i","Number","solution","includes","push","className","onMouseOver","onMouseLeave","onMouseDown","onMouseUp","onClick","map","div","Rows","Board","Array","fill","setBoard","setGame","initialJSX","JSX","setJSX","round","sqId","player","solutions","length","a","b","c","Winner","winner","newJSX","useEffect","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a88d21db.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport default function Squares({ sPos, fillSquare, board, active, game }) {\n  const [reLoad, setReload] = useState(false);\n  const handleMouseDown = (e) => {\n    e.target.style.backgroundColor = '#efefef5c';\n  };\n  const handleMouseUp = (e) => {\n    e.target.style.backgroundColor = '';\n  };\n  const handleOnMouseOver = (e) => {\n    e.target.style.backgroundColor = '#efefef1c';\n  };\n  const handleOnMouseOut = (e) => {\n    e.target.style.backgroundColor = '';\n  };\n  let divs = [];\n  const handleClick = (e) => {\n    console.log(game);\n    e.target.style.pointerEvents = 'none';\n    fillSquare(e.target.attributes[1].value);\n    setReload(!reLoad);\n  };\n  //   for (let i = Number(sPos); i <= Number(sPos) + 2; i++) {\n  //     divs.push(\n  //       <div\n  //         style={{ pointerEvents: active ? '' : 'none' }}\n  //         key={i}\n  //         className='square'\n  //         data-index={i}\n  //         onMouseOver={handleOnMouseOver}\n  //         onMouseLeave={handleOnMouseOut}\n  //         onMouseDown={handleMouseDown}\n  //         onMouseUp={handleMouseUp}\n  //         onClick={handleClick}\n  //       >\n  //         {board[i]}\n  //       </div>\n  //     );\n  //   }\n  if (game.finished) {\n    for (let i = Number(sPos); i <= Number(sPos) + 2; i++) {\n      if (game.solution.includes(i)) {\n        divs.push(\n          <div\n            style={{ pointerEvents: active ? '' : 'none' }}\n            key={i}\n            className='square winner'\n            data-index={i}\n            onMouseOver={handleOnMouseOver}\n            onMouseLeave={handleOnMouseOut}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onClick={handleClick}\n          >\n            {board[i]}\n          </div>\n        );\n      } else {\n        divs.push(\n          <div\n            style={{ pointerEvents: active ? '' : 'none' }}\n            key={i}\n            className='square loser'\n            data-index={i}\n            onMouseOver={handleOnMouseOver}\n            onMouseLeave={handleOnMouseOut}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onClick={handleClick}\n          >\n            {board[i]}\n          </div>\n        );\n      }\n    }\n  } else {\n    for (let i = Number(sPos); i <= Number(sPos) + 2; i++) {\n      divs.push(\n        <div\n          style={{ pointerEvents: active ? '' : 'none' }}\n          key={i}\n          className='square'\n          data-index={i}\n          onMouseOver={handleOnMouseOver}\n          onMouseLeave={handleOnMouseOut}\n          onMouseDown={handleMouseDown}\n          onMouseUp={handleMouseUp}\n          onClick={handleClick}\n        >\n          {board[i]}\n        </div>\n      );\n    }\n  }\n  return divs.map((div) => div);\n}\n","import React from 'react';\nimport Squares from './Squares';\n\nexport default function Rows({ fillSquare, board, game, active }) {\n  //   winners = [a,b,c]\n  return (\n    <>\n      <div className='b-row first-row'>\n        {game.finished ? (\n          <Squares\n            sPos='0'\n            fillSquare={fillSquare}\n            board={board}\n            game={game}\n            active={active}\n          />\n        ) : (\n          <Squares\n            sPos='0'\n            fillSquare={fillSquare}\n            board={board}\n            game={game}\n            active={active}\n          />\n        )}\n      </div>\n      <div className='b-row second-row'>\n        {game.finished ? (\n          <Squares\n            sPos='3'\n            fillSquare={fillSquare}\n            board={board}\n            game={game}\n            active={active}\n          />\n        ) : (\n          <Squares\n            sPos='3'\n            fillSquare={fillSquare}\n            board={board}\n            game={game}\n            active={active}\n          />\n        )}\n      </div>\n      <div className='b-row third-row'>\n        {game.finished ? (\n          <Squares\n            sPos='6'\n            fillSquare={fillSquare}\n            board={board}\n            game={game}\n            active={active}\n          />\n        ) : (\n          <Squares\n            sPos='6'\n            fillSquare={fillSquare}\n            board={board}\n            game={game}\n            active={active}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport Rows from './Rows';\n// import Squares from './Squares';\n\nexport default function Board() {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [game, setGame] = useState({});\n  let active = true;\n\n  const initialJSX = (\n    <>\n      <h1>Tic-Tac-Toe</h1>\n      <div className='board'>\n        <Rows\n          fillSquare={fillSquare}\n          board={board}\n          game={game}\n          active={active}\n        />\n      </div>\n    </>\n  );\n\n  const [JSX, setJSX] = useState(initialJSX);\n\n  let round = 0;\n\n  function fillSquare(sqId) {\n    const player = round % 2 === 0 ? 'X' : 'O';\n    board[sqId] = player;\n    console.log(`Ronda: ${round}, jugador ${player}, ha colocado en ${sqId}`);\n    round++;\n    setBoard(board);\n    const solutions = [\n      [0, 1, 2],\n      [0, 4, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [3, 4, 5],\n      [6, 7, 8],\n      [2, 5, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < solutions.length; i++) {\n      const [a, b, c] = solutions[i];\n      if (board[a] && board[a] === board[b] && board[b] === board[c]) {\n        const Winner = board[a];\n        active = false;\n        setGame({\n          finished: true,\n          winner: Winner,\n          solution: solutions[i],\n          active: { active },\n        });\n      }\n    }\n    if (!board.includes(null)) {\n      active = false;\n      const newJSX = (\n        <>\n          <h1>Tic-Tac-Toe</h1>\n          <div className='endGame'>\n            <h1>It was a tie!</h1>\n          </div>\n          <Rows\n            fillSquare={fillSquare}\n            board={board}\n            active={active}\n            game={game}\n          />\n        </>\n      );\n      return setJSX(newJSX);\n    }\n  }\n\n  useEffect(() => {\n    if (game.finished) {\n      console.log(game);\n      const newJSX = (\n        <>\n          <h1>Tic-Tac-Toe</h1>\n          <div className='endGame'>\n            <h1>Ha ganado {game.winner}</h1>\n          </div>\n          <Rows fillSquare={fillSquare} board={board} game={game} />\n        </>\n      );\n      return setJSX(newJSX);\n    }\n  }, [game]);\n\n  return JSX;\n}\n","import './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <>\n      <Board />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}